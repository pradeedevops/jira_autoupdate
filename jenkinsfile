pipeline {
    agent any

    environment {
        JIRA_BASE_URL = 'https://pradeepanaveensabares.atlassian.net'
        JIRA_ISSUE_KEY = '' // Set dynamically
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Extract Jira Issue Key') {
            steps {
                script {
                    def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    echo "Commit message: ${commitMessage}"

                    def match = commitMessage =~ /(PROJ|JIRA|QA|DEV|KAN)-\d+/
                    if (match) {
                        env.JIRA_ISSUE_KEY = match[0]
                        echo "Jira Issue Key detected: ${env.JIRA_ISSUE_KEY}"
                    } else {
                        error "No Jira issue key found in commit message."
                    }
                }
            }
        }

        stage('Check Status and Start Progress') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jira_credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_TOKEN')]) {
                        def auth = sh(script: "echo -n ${JIRA_USER}:${JIRA_TOKEN} | base64", returnStdout: true).trim()

                        def statusResponse = sh(
                            script: """curl -s -H "Authorization: Basic ${auth}" \
                                          -H "Content-Type: application/json" \
                                          "${JIRA_BASE_URL}/rest/api/3/issue/${env.JIRA_ISSUE_KEY}" """,
                            returnStdout: true
                        )

                        def statusJson = readJSON text: statusResponse
                        def currentStatus = statusJson.fields.status.name
                        echo "Current Jira Status: ${currentStatus}"

                        if (currentStatus == "TO DO") {
                            transitionJiraIssue(env.JIRA_ISSUE_KEY, "start progress", auth)
                        } else if (currentStatus != "IN PROGRESS") {
                            error "Jira issue not in a valid state to proceed: ${currentStatus}"
                        }
                    }
                }
            }
        }

        stage('Basic Smoke Tests') {
            steps {
                echo 'Running basic smoke tests...'
                sh 'echo "All tests passed!"'
            }
        }

        stage('Update Jira After Test') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jira_credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_TOKEN')]) {
                        def auth = sh(script: "echo -n ${JIRA_USER}:${JIRA_TOKEN} | base64", returnStdout: true).trim()
                        def transitionName = currentBuild.currentResult == 'SUCCESS' ? "Mark as Done" : "Inputs needed"
                        transitionJiraIssue(env.JIRA_ISSUE_KEY, transitionName, auth)
                    }
                }
            }
        }
    }
}

def transitionJiraIssue(issueKey, transitionName, authToken) {
    def transitionsResponse = sh(
        script: """curl -s -H "Authorization: Basic ${authToken}" \
                          -H "Content-Type: application/json" \
                          "${JIRA_BASE_URL}/rest/api/3/issue/${issueKey}/transitions" """,
        returnStdout: true
    )

    def transitionsJson = readJSON text: transitionsResponse
    def transition = transitionsJson.transitions.find { it.name.equalsIgnoreCase(transitionName) }

    if (transition) {
        def payload = [
            transition: [id: transition.id]
        ]
        def payloadStr = groovy.json.JsonOutput.toJson(payload)

        sh """curl -s -X POST \
                 -H "Authorization: Basic ${authToken}" \
                 -H "Content-Type: application/json" \
                 --data '${payloadStr}' \
                 "${JIRA_BASE_URL}/rest/api/3/issue/${issueKey}/transitions" """
        echo "Transitioned issue ${issueKey} to '${transitionName}'"
    } else {
        error "Transition '${transitionName}' not found for issue ${issueKey}"
    }
}

